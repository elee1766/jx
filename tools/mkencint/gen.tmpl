{{ define "main" }}
{{- /*gotype: github.com/go-faster/jx/tools/mkencint.Config*/ -}}
package {{ $.PackageName }}

var digits []uint32

func init() {
	digits = make([]uint32, 1000)
	for i := uint32(0); i < 1000; i++ {
		digits[i] = (((i / 100) + '0') << 16) + ((((i / 10) % 10) + '0') << 8) + i%10 + '0'
		if i < 10 {
			digits[i] += 2 << 24
		} else if i < 100 {
			digits[i] += 1 << 24
		}
	}
}

func writeFirstBuf(space []byte, v uint32) []byte {
	start := v >> 24
	if start == 0 {
		space = append(space, byte(v>>16), byte(v>>8))
	} else if start == 1 {
		space = append(space, byte(v>>8))
	}
	space = append(space, byte(v))
	return space
}

func writeBuf(buf []byte, v uint32) []byte {
	return append(buf, byte(v>>16), byte(v>>8), byte(v))
}

{{ range $typ := $.Types }}
{{ template "encode_uint" $typ }}
{{ template "encode_int" $typ }}
{{- end }}
{{ end }}

{{ define "encode_uint" }}
{{- /*gotype: github.com/go-faster/jx/tools/mkencint.IntType */ -}}
// U{{ $.Name }} encodes u{{ $.Name }}.
func (e *Encoder) U{{ $.Name }}(v u{{ $.Name }}) {
	e.comma()
	q0 := v
	{{- range $i, $_ := times $.Iterations }}
	// Iteration {{ $i }}.
	{{- if not (eq $i 0) }}
	r{{$i}} := q{{add $i -1}} - q{{$i}}*1000
	{{- end }}

	{{- if eq $i (sub $.Iterations 1) }}
	e.buf = writeFirstBuf(e.buf, digits[q{{$i}}])
	{{- range $r, $_ := times $i }}
	e.buf = writeBuf(e.buf, digits[r{{sub $i $r}}])
	{{- end }}
	{{- else }}
	q{{add $i 1}} := q{{$i}} / 1000
	if q{{add $i 1}} == 0 {
		e.buf = writeFirstBuf(e.buf, digits[q{{$i}}])
		{{- range $r, $_ := times $i }}
		e.buf = writeBuf(e.buf, digits[r{{sub $i $r}}])
		{{- end }}
		return
	}
	{{- end }}
	{{- end }}
}
{{ end }}

{{ define "encode_int" }}
{{- /*gotype: github.com/go-faster/jx/tools/mkencint.IntType */ -}}
// {{ title $.Name }} encodes {{ $.Name }}.
func (e *Encoder) {{ title $.Name }}(v {{ $.Name }}) {
	var val u{{ $.Name }}
	if v < 0 {
		val = u{{ $.Name }}(-v)
		e.comma()
		e.resetComma()
		e.buf = append(e.buf, '-')
	} else {
		val = u{{ $.Name }}(v)
	}
	e.U{{ $.Name }}(val)
}
{{ end }}
